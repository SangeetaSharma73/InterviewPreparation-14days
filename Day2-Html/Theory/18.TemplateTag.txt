🧩 Topic: The <template> Tag and Dynamic Cloning with JavaScript
🔹 D – Definition
The <template> tag in HTML holds client-side content that is not rendered when the page loads. It is inert: the browser parses it but does not display it.

Its content exists in the DOM, but not in the render tree.

It is used to define reusable chunks of HTML (e.g., cards, modals, list items).

The content can be cloned and inserted dynamically using JavaScript.

🔹 U – Use Cases
🔸 Building repeating UI elements (e.g., product cards, list rows)

🔸 Creating modals, tooltips, or other UI fragments dynamically

🔸 Used in frontend frameworks for component templates

🔸 Dynamically rendering API data into reusable HTML blocks

🔹 B – Benefits
✅ Avoids duplicating HTML markup

✅ Keeps HTML clean and semantic

✅ Reduces DOM complexity on initial load

✅ Allows safe, lazy injection of content when needed

🔹 X – Extra Info / Tips
Access the content via .content property.

Use cloneNode(true) to deep-clone the content.

Not rendered until you explicitly append it to the DOM.

Works well with shadow DOM and Web Components.

✅ Example: Cloning and Injecting Template via JavaScript
✅ HTML

<template id="user-card">
  <div class="card">
    <h2 class="name"></h2>
    <p class="email"></p>
  </div>
</template>

<div id="container"></div>
✅ JavaScript

const template = document.getElementById('user-card');
const container = document.getElementById('container');

// Example data
const user = { name: "Alice", email: "alice@example.com" };

// Clone template
const clone = template.content.cloneNode(true);

// Fill in data
clone.querySelector('.name').textContent = user.name;
clone.querySelector('.email').textContent = user.email;

// Append to container
container.appendChild(clone);
🔍 What Happens
The <template> defines the structure of a card.

It’s invisible until cloned.

JavaScript injects dynamic content and appends it to the DOM.

